{"version":3,"file":"static/js/360.81679427.chunk.js","mappings":"+LAUaA,EAAoC,SAACC,GAC9C,IAAQC,EAASD,EAATC,KAER,OACIC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAKF,EAAKI,SACVD,EAAAA,EAAAA,KAACE,EAAAA,EAAO,KACRF,EAAAA,EAAAA,KAAA,OAAAD,SAAMF,EAAKM,SAGvB,E,4DCnBA,EAA2B,yBAA3B,EAA+D,yBAA/D,EAAmG,yB,WCYtFC,EAAoCC,EAAAA,MAAW,SAACT,GACzD,IAAQC,EAAuBD,EAAvBC,KAASS,GAASC,EAAAA,EAAAA,GAAKX,EAAKY,GAE9BC,GAAWC,EAAAA,EAAAA,MAGjB,OACIV,EAAAA,EAAAA,KAACW,EAAAA,GAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACDC,UAAWC,EACXb,OACIH,EAAAA,EAAAA,MAAA,QAAAC,SAAA,EACID,EAAAA,EAAAA,MAACiB,EAAAA,GAAI,CAACC,GAAE,SAAAC,OAAWpB,EAAKqB,IAAKnB,SAAA,CAAC,IAAEF,EAAKqB,MACpC,IAAMrB,EAAKI,SAGpBkB,QAAS,EACLnB,EAAAA,EAAAA,KAACoB,EAAAA,GAAM,CACHP,UAAWC,EACXO,KAAK,UACLC,KAAK,QACLC,QAhBC,WAAH,OAASd,EAAS,SAADQ,OAAUpB,EAAKqB,IAAM,EAgBlBnB,SACrB,gBAIDO,GAAS,IAAAP,UAEbC,EAAAA,EAAAA,KAAA,OAAKa,UAAWC,EAAgBf,SAAEF,EAAKM,SAGnD,G,4IC7BaqB,EAAsB,WAC/B,IAAAC,GAAwBC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA5BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAAoDC,EAAAA,EAAAA,IAAkBH,GAAxDI,EAAKF,EAAXG,KAAaC,EAAUJ,EAAVI,WAAYC,EAAKL,EAALK,MAAOC,EAAON,EAAPM,QAClCC,GAAaC,EAAAA,EAAAA,QAAO,GAEpBC,GAAYC,EAAAA,EAAAA,KAAkB,gBAClBC,IAAVT,IAIAK,EAAWK,UAAYV,EAAMW,QAC7Bd,EAAQD,EAAO,GAGnBS,EAAWK,QAAUV,EAAMW,OAC/B,IAcA,OAZAC,EAAAA,EAAAA,YAAU,WACN,QAAcH,IAAVT,EAAJ,CAIA,IAAMa,EAAcC,KAAKC,KAAKf,EAAMW,OAAS,SAE/BF,IAAVT,GAAuBa,EAAcjB,GACrCC,EAAQgB,EALZ,CAOJ,GAAG,CAACjB,EAAMI,KAGNnC,EAAAA,EAAAA,MAACmD,EAAAA,EAAI,CAACC,UAAU,EAAMC,IAAI,OAAMpD,SAAA,CAC3BkC,GACGA,EAAMmB,KAAI,SAACvD,EAAMwD,GAAK,OAClBrD,EAAAA,EAAAA,KAACsD,EAAAA,GAAa,CAACC,SAAU,IAAIxD,UACzBC,EAAAA,EAAAA,KAACI,EAAAA,EAAQ,CAAaP,KAAMA,GAAbwD,IACH,IAEvBjB,IACGpC,EAAAA,EAAAA,KAACwD,EAAAA,GAAU,CACPC,YAAY,uBACZC,OAAQ,CAAEC,GAAItB,EAASoB,YAAa,WAG3CtB,GAAanC,EAAAA,EAAAA,KAAC4D,EAAAA,GAAO,KAAM5D,EAAAA,EAAAA,KAAA,OAAK6D,IAAKrB,MAGlD,EC9CA,EAT2B,WACvB,OACI1C,EAAAA,EAAAA,MAACgE,EAAAA,GAAI,CAAA/D,SAAA,EACDC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAACwB,EAAS,MAGtB,C","sources":["entities/post/ui/full-post/index.tsx","webpack://picasso/./src/entities/post/ui/post-card/styles.module.css?7238","entities/post/ui/post-card/index.tsx","widgets/post-block/index.tsx","pages/main/index.tsx"],"sourcesContent":["import React from \"react\";\n\nimport { Divider } from \"antd\";\n\nimport { Post } from \"shared/api\";\n\ninterface FullPostProps {\n    post: Post;\n}\n\nexport const FullPost: React.FC<FullPostProps> = (props) => {\n    const { post } = props;\n\n    return (\n        <div>\n            <h2>{post.title}</h2>\n            <Divider />\n            <div>{post.body}</div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"openPost\":\"styles_openPost__CKMBS\",\"postBody\":\"styles_postBody__6u5ft\",\"postCard\":\"styles_postCard__J8z5H\"};","import React from \"react\";\n\nimport { Button, Card } from \"antd\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { Post } from \"shared/api\";\n\nimport styles from \"./styles.module.css\";\n\ninterface PostCardProps {\n    post: Post;\n}\n\nexport const PostCard: React.FC<PostCardProps> = React.memo((props) => {\n    const { post, ...cardProps } = props;\n\n    const navigate = useNavigate();\n    const goToPost = () => navigate(`/post/${post.id}`);\n\n    return (\n        <Card\n            className={styles.postCard}\n            title={\n                <span>\n                    <Link to={`/post/${post.id}`}>#{post.id}</Link>\n                    {\" \" + post.title}\n                </span>\n            }\n            actions={[\n                <Button\n                    className={styles.openPost}\n                    type=\"primary\"\n                    size=\"small\"\n                    onClick={goToPost}\n                >\n                    Open Post\n                </Button>,\n            ]}\n            {...cardProps}\n        >\n            <div className={styles.postBody}>{post.body}</div>\n        </Card>\n    );\n});\n","import React from \"react\";\n\nimport { Flex } from \"antd\";\nimport { useEffect, useRef, useState } from \"react\";\n\nimport { PostCard } from \"entities/post\";\nimport { useListPostsQuery } from \"shared/api\";\nimport {\n    useInfiniteScroll,\n    ErrorAlert,\n    Loading,\n    VirtualScroll,\n} from \"shared/ui\";\n\nexport const PostBlock: React.FC = () => {\n    const [page, setPage] = useState(1);\n    const { data: posts, isFetching, error, refetch } = useListPostsQuery(page);\n    const prevLength = useRef(0);\n\n    const scrollRef = useInfiniteScroll(() => {\n        if (posts === undefined) {\n            return;\n        }\n\n        if (prevLength.current !== posts.length) {\n            setPage(page + 1);\n        }\n\n        prevLength.current = posts.length;\n    });\n\n    useEffect(() => {\n        if (posts === undefined) {\n            return;\n        }\n\n        const actualPages = Math.ceil(posts.length / 10);\n\n        if (posts !== undefined && actualPages > page) {\n            setPage(actualPages);\n        }\n    }, [page, posts]);\n\n    return (\n        <Flex vertical={true} gap=\"20px\">\n            {posts &&\n                posts.map((post, index) => (\n                    <VirtualScroll heightPx={200}>\n                        <PostCard key={index} post={post} />\n                    </VirtualScroll>\n                ))}\n            {error && (\n                <ErrorAlert\n                    description=\"Couldn't load posts.\"\n                    action={{ fn: refetch, description: \"Retry\" }}\n                />\n            )}\n            {isFetching ? <Loading /> : <div ref={scrollRef}></div>}\n        </Flex>\n    );\n};\n","import React from \"react\";\n\nimport { Page } from \"shared/ui\";\nimport { PostBlock } from \"widgets/post-block\";\n\nconst MainPage: React.FC = () => {\n    return (\n        <Page>\n            <h1>Posts</h1>\n            <PostBlock />\n        </Page>\n    );\n};\n\nexport default MainPage;\n"],"names":["FullPost","props","post","_jsxs","children","_jsx","title","Divider","body","PostCard","React","cardProps","_objectWithoutProperties","_excluded","navigate","useNavigate","Card","_objectSpread","className","styles","Link","to","concat","id","actions","Button","type","size","onClick","PostBlock","_useState","useState","_useState2","_slicedToArray","page","setPage","_useListPostsQuery","useListPostsQuery","posts","data","isFetching","error","refetch","prevLength","useRef","scrollRef","useInfiniteScroll","undefined","current","length","useEffect","actualPages","Math","ceil","Flex","vertical","gap","map","index","VirtualScroll","heightPx","ErrorAlert","description","action","fn","Loading","ref","Page"],"sourceRoot":""}